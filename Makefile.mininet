POXFLAGS = --unthreaded-sh log.color log.level --DEBUG
PYFLAGS = -Wall -u # all warnings, unbuffered output

help:
	@echo "Targets: "
	@echo "  pox: start custom POX controller"
	@echo "  mininet: start custom mininet w/remote controller"
	@echo "  mininet-kv: start mininet with kv-servers"
	@echo "  mininet-noop: start mininet with noop"
	@echo ""
	@echo "For benchmarking:"
	@echo "  bench-baseline-pox: Start baseline controller"
	@echo "  bench-baseline-mininet: Boot baseline Mininet"

.DUMMY:

mininet: .DUMMY
	sudo python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py simple ping-listen

mininet-kv: .DUMMY
	sudo python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py simple kv-server

mininet-noop: .DUMMY
	sudo python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py simple noop

bench-baseline-mininet: .DUMMY
	@echo Booting Mininet for the baseline topology
	# baseline-topo = the topology
	# noop = don't start any services on the mininet nodes
	sudo ADDFLOWS=1 python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py baseline-topo baseline-bench

default: .DUMMY
	sudo ADDFLOWS=1 python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py baseline-topo noop

paxos-net-noflows: .DUMMY
	sudo ADDFLOWS=0 python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py paxos-topo noping

bench-kv:
	sudo ADDFLOWS=1 python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py baseline-topo kv-server

bench-baseline-mininet-noflows: .DUMMY
	@echo Booting Mininet noflows for the baseline topology
	# baseline-topo = the topology
	# noop = don't start any services on the mininet nodes
	sudo ADDFLOWS=0 python $(PYFLAGS) \
		~/bach/paxos/boot-mininet.py baseline-topo baseline-bench-noflows

bench-baseline:
	@echo Starting Mininet and POX in the same session.
	@echo If output is very garbled, you can start two sessions
	@echo using the targets bench-baseline-mininet and bench-baseline-pox
	make bench-baseline-pox &
	make bench-baseline-mininet

bench-baseline-noflows:
	@echo Starting Mininet and POX in the same session.
	@echo If output is very garbled, you can start two sessions
	@echo using the targets bench-baseline-mininet and bench-baseline-pox
	make bench-baseline-pox-noflows &
	make bench-baseline-mininet-noflows

bench-baseline-pox: .DUMMY
	@echo Starting the POX L2 learning switch w/flow entries
	# paxos.controller.baseline is the one we will start
	cd ~/pox; ADDFLOWS=1 python $(PYFLAGS) \
		./pox.py $(POXFLAGS) paxos.controller.baseline

paxos-pox-noflows: .DUMMY
	@echo Starting the POX Paxos controller + L2 learning switch w/flow entries
	# paxos.controller.baseline is the one we will start
	cd ~/pox; ADDFLOWS=0 python $(PYFLAGS) \
		./pox.py $(POXFLAGS) paxos.controller.paxosctrl

paxos-pox: .DUMMY
	@echo Starting the POX Paxos controller + L2 learning switch w/flow entries
	# paxos.controller.baseline is the one we will start
	cd ~/pox; ADDFLOWS=1 python $(PYFLAGS) \
		./pox.py $(POXFLAGS) paxos.controller.paxosctrl

bench-baseline-pox-noflows: .DUMMY
	@echo Starting the POX L2 learning switch w/flow entries
	# paxos.controller.baseline is the one we will start
	cd ~/pox; ADDFLOWS=0 python $(PYFLAGS) \
		./pox.py $(POXFLAGS) paxos.controller.baseline

pox: .DUMMY
	cd ~/pox; ADDFLOWS=1 python $(PYFLAGS) \
					 ./pox.py $(POXFLAGS) paxos.controller.default

pox-crit: .DUMMY
	cd ~/pox; python $(PYFLAGS) \
		./pox.py --unthreaded-sh log.color log.level --CRITICAL \
			paxos.controller.default

bench-both:
	$(MAKE) bench-baseline-pox-noflows &
	$(MAKE) default

clean:
	rm -f *.csv data*.txt ping*.txt
