Here are some notes on coding against Open vSwitch.
Focus is on modifying the parts implementing OpenFlow.

- Compiling Open vSwitch, see thesis notes.
  Was really no problem. The codebase is really clean and it seems they've
  spent a lot of time making a really source distribution.

- Using the logger

  #include "vlog.h"
  VLOG_FATAL("bla bla %s", ovs_strerror(errno));

- I'm working on origin/branch-2.1.
  There is a newer one in HEAD, but I want to code against a stable version.

- Here are dev notes from ovs:
  http://openvswitch.org/development/

- Some personal dev notes from a guy:
  https://github.com/ljakab/openvswitch/wiki/Development-notes

- The wiki pages contain useful info
  https://github.com/ljakab/openvswitch/wiki/_pages

- Placed where openflow may be implemented:

  $ grep -RI openflow\\.h * | grep \\.c | cut -f1 -d: | sort | uniq
  lib/flow.c
  lib/learn.c
  lib/learning-switch.c
  lib/netdev-bsd.c
  lib/netdev.c
  lib/netdev-linux.c
  lib/ofp-errors.c
  lib/ofp-msgs.c
  lib/ofp-parse.c
  lib/ofp-print.c
  lib/rconn.c
  lib/stream.c
  lib/stream-ssl.c
  lib/vconn.c
  lib/vconn-stream.c
  ofproto/in-band.c
  ofproto/ofproto.c
  ofproto/pinsched.c
  tests/test-controller.c
  tests/test-flows.c
  tests/test-vconn.c
  utilities/ovs-ofctl.c
  vswitchd/ovs-vswitchd.c

- More on files

- The file ofproto/ofproto.c has defs for OpenFlow such as
  OFOPERATION_ADD, etc. Seems this is a good starting point for extending
  the ovs part of ofp.

- Also, grep for "ofproto_mutex", because it's a global lock (mutex) that
  protects all flow table operations! :)

- ... which leads to this very nice list:

  $ grep -RI ofproto_mutex | cut -f1 -d: | sort | uniq
  lib/classifier.h
  ofproto/connmgr.c
  ofproto/connmgr.h
  ofproto/fail-open.c
  ofproto/ofproto.c
  ofproto/ofproto-dpif.c
  ofproto/ofproto-provider.h

- indeed, most of OpenFlow is implemented in ofproto/ofproto.c
- they use C90 (aka C89), so be sure to follow that
- if you make new .c files, you MUST incude <config.h> per build rules,
  and to automatically build, add them to automake.mk

- a lot of good stuff in connmgr.c as well (executing flows, etc.)

- to run a flow, you pass the struct and a function pointer, so I need to
  dig those out.

- don't know what "dpif" is, but dpid is "datapath id", or the connection
  to a controller.

- anyway, ofproto-dpif.c is THE place to be.. this is where openflow stuff
  actually happens (e.g. hard timeouts are acted on, etc), it seeems

- ah, in lib/dpif.h: "dpif, the DataPath InterFace"

- note: (from dpif.h)
  "In Open vSwitch terminology, a "datapath" is a flow-based software
  switch. A datapath has no intelligence of its own."
  note that they say _switch_ here, and not controller.

- wow, lots of REALLY good documentation in dpif.h! explains basically the
  entire ovs ofp implementation. upcalls happen when a packet doesnt match a
  flow, so it sends to controller.


- ok, so I can now print out logs when flows are executed.. but it appears
they are only printed the first time or so... it seems that when flows have
been installed, it bypasses the normal ofp execution path.. so perhaps they
use some stuff in ovs, a cache or table or whatever, that just knows that it
has to forward a packet or something.. means we have to dig deeper to find
out where we can inject bytecode..

- also, i'm logging stuff to file, and this causes enough of a delay so that
some ping packets are dropped! so, the code has to be blazing fast, which
does not seem to be good for interpreted bytecode.. the best would be to be
able to JIT the code AND have a reentrant interpreter so we can execute a
few cycles, move on, then execute some more, etc.. because if not, we will
hang different message pumps / loops, etc... there are schedulers and stuff,
so if a bytecode takes too much time, it will affect other parts of the
network!

- installed gdb on the mininet vm, so I can do "gdb -p PID" to debug the
  vswitchd...

- openflow spec is at include/openflow/
- i've added a new action OFPAT10_RUN_CODE to
  include/openflow/openflow-1.0.h
- grepping for OFPAT10_OUTPUT (output on switch port), it seems
  that the switch-case for it is in ofpact_from_openflow10
  in file lib/ofp-actions.c
- also seems I have to set an action bitmap in ofp-util.h at line 476
  (seem they use bitmasks to mark what to do).. fortunately, there is
  space for more here, IT SEEMS
- I'm adding comments with /* Extension: ... */ so it's easily searched
  for.
- la til en ny action som sagt, måtte greppe på andre actions for å 
  finne alle stedene jeg måtte legge inn nytt stuff.
  Ser ut som selve parsingen av respons ligger i ofp-parse.c under
  parse_named_action.
- se i ofp-actions.c, ofpact_from_openflow10, ser ut som de executer ting
der.

- EXPERIMENTER FIELDS, se i include/openflow/openflow-common.h
  Se etter "Vendor (aka experimenter) IDs."
  Vi bør følge denne saken helst!
  Det kule er, hvis top byte er 0 så er laveste 24-bits en Ethernet OUI!
  !!! Med andre ord kan vi legge inn 0x7A 0x05 her ("PAXOS") her,
  matche på det i regler osv.. så da passer det fint inn!


- TODO: Under lib/ofp-actions.c func ofpact_outputs_to_port, we need
        to tell ovs if the action will output to port. Do we really
        know that in advance??? Depends on how we specify the contract.
        Perhaps we don't need to output to port, maybe we can instead
        instruct ovs to STOP doing stuff depending on return code.
        If we say "YES" here, and the code does NOT output to port,
        THEN what?  It's a bit lame if we require all code to output
        something.. setting to false for now.. but, perhaps we need
        to look more into this.... (we do)

  ah, it only checks if the action will output to the GIVEN port..
  i.e., "does_this_action_output_to_THIS_port?(action-struct, this_port)"
  SO, the way to fix that is to let the bytecode have a function that
  MUST be defined, that says "YEA" or "NAY".. but again, it depends
  on what the code actually does.. will it know ahead?..
  they call ofpact_get_RUN_CODE(ofpact)->port == port, so the struct
  itself must know.. ok, we can solve this..
  when you create an action, you must add a parameter to which port
  it will output to, if any... this may be somewhat limiting..
  or look up the call chain to where this is called from...
  have to investigate more......... false for now..

- hmm, virker litt stress å gjøre det "riktig" dette her...
  kanskje måten å gjøre det på er å bare finne call site for hvor
  pakker blir matchet i flow table, og legge inn hook her for
  helt hardkoda ting som eth_type = PAXOS og sånt? tror det er enklere...

- struct STRUCT ofpact_put_ENUM(struct ofpbuf *ofpacts)
  struct STRUCT ofpact_get_ENUM(...)
  void ofpact_init_ENUM(struct STRUCT *ofpact)
  ENUM_RAW_SIZE, for var-len, this is offset to the varlen part
  ENUM_SIZE blabla

  lib/ofp-actions.c:1523
  ofproto/ofproto-dpif-xlate.c: In function ‘do_xlate_actions’:
  ofproto/ofproto-dpif-xlate.c:2197:9: warning: enumeration value
  ‘OFPACT_RUN_CODE’ not handled in switch [-Wswitch]

- ok, in build-aux/check-structs (python), they check for struct
  alignment, must be multiple of 32-bits because of misc ABIs (ARM etc)
- this script bails on openflow-common.h def for my thingy.. AH,
   it's, hmm no.. uyes it is.. it's because i must use ovs_beXX
   defs for everything other than padding!

- about output ports, see
    ofproto_rule_has_out_port
    ofoperation_has_out_port
  altså, ser ut som jeg får en 

- btw, ovs calls "subactions" for "operation".. so ofoperation = ADD,
  MODIFY, REPLACE, etc.

