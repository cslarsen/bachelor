NY VERSJON
==========

WAN-ctrl:

# Forward from CLIENTS to PAXOS
add-flow WAN0 in_port=WAN,actions=dl_type:0x7a??,output=PAX

# Forward from PAXOS to CLIENT NODE
add-flow WAN0 in_port=PAX,ethdst=c1,actions=output:WAN.c1
add-flow WAN0 in_port=PAX,ethdst=c2,actions=output:WAN.c2
add-flow WAN0 in_port=PAX,ethdst=c3,actions=output:WAN.c3

# Forward replies to WAN to next hop
add-flow S3 ethdst=c1,actions=output:S2
add-flow S3 ethdst=c2,actions=output:S2
add-flow S3 ethdst=c3,actions=output:S2
#
add-flow S2 ethdst=c1,actions=output:S1
add-flow S2 ethdst=c2,actions=output:S1
add-flow S2 ethdst=c3,actions=output:S1
#
add-flow S1 ethdst=c1,actions=output:WAN
add-flow S1 ethdst=c2,actions=output:WAN
add-flow S1 ethdst=c3,actions=output:WAN

# Paxos: ON CLIENT
add-flow S1 dl_type=CLIENT,actions=run_code:1

# Paxos: ON ACCEPT
add-flow S1/S2/S3 dl_type=ACCEPT,actions=run_code:2

# Paxos: ON LEARN
add-flow S1/S2/S3 dl_type=LEARN,actions=run_code:3

Kan vi kombinere LEARN med output?
add-flow S1/s2/s3 dl_type=LEARN,actions=run_code:3,output=FLOOD ?
mÃ¥ jo rewrite for hver host da egentlig

GAMMEL VERSJON UNDER
====================

Plan on implementing Paxos on openvswitch.
------------------------------------------

TODO: Remove Python compilation flags.

Need to install flows, we do this by command line (see below).

We actually need to know which ports to output to, if we're to send
from them.  I think we NEED to use Open vSwitch to send packets, otherwise
they won't go on the virtual network.

ON CLIENT, code key 0
---------------------
Instead of using client message, just see if input comes on the client port.

Code:
- are we leader? if no, then forward to leader (or bail)
  -> this part can actually be separate flows installed on S2 and S3!! DO
  THAT

- On S1 only (leader)
- set n = crnd = 4 (static)
- seqno = seqno + 1 (mutex?)
- v = unpack_client(payload)
- send_accept(S1/S2+ourself(or just short-circuit), seqno, v)

ON ACCEPT, code key 1
---------------------
ofctl add-flow S2 idle_timeout=20,dl_type=0x7a01,actions=run_code:1

Code:
- n, seqno, v = unpack_accept(message)
- slot = getslot(seqno)
- if n != slot.vrnd:
    slot.vrnd = n
    slot.vval = v

    send_learn(S2/S3/S1, n, seqno)

- See if we can hardcode ether addrs in PaxosTopology, then we don't
  need to learn these.


ON LEARN, code key 2
--------------------
ofctl add-flow S2 idle_timeout=20,dl_type=0x7a01,actions=run_code:2

Code:
- n, seqno = unpack_learn(messageW)
- slot = get_slot(n, seqno) (mutex)
- if slot.learned -> drop
- if slot.processed -> drop
- slot.update_learns(src-mac)
- process-queue

- process-queue:
  - for seqno in cseqno:
      if slot.learned:
        v = slot.v
        send_message(v, all host macs) (again use ether config)
        when sent to all, set at processed, and/or remove from queue

- note: we also need to REWRITE ETHER+IP DEST
- see i ovs has libs do recalc checksums
- or use a separate lib
- see if we can write in c++ and hook in
- need to know the controller id, so we can discern the states..

