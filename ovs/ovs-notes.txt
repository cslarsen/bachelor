Here are some notes on coding against Open vSwitch.

- Compiling Open vSwitch, see thesis notes.
  Was really no problem. The codebase is really clean and it seems they've
  spent a lot of time making a really source distribution.

- Using the logger

  #include "vlog.h"
  VLOG_FATAL("bla bla %s", ovs_strerror(errno));

- I'm working on origin/branch-2.1.
  There is a newer one in HEAD, but I want to code against a stable version.

- Here are dev notes from ovs:
  http://openvswitch.org/development/

- Some personal dev notes from a guy:
  https://github.com/ljakab/openvswitch/wiki/Development-notes

- The wiki pages contain useful info
  https://github.com/ljakab/openvswitch/wiki/_pages

- Placed where openflow may be implemented:

  $ grep -RI openflow\\.h * | grep \\.c | cut -f1 -d: | sort | uniq
  lib/flow.c
  lib/learn.c
  lib/learning-switch.c
  lib/netdev-bsd.c
  lib/netdev.c
  lib/netdev-linux.c
  lib/ofp-errors.c
  lib/ofp-msgs.c
  lib/ofp-parse.c
  lib/ofp-print.c
  lib/rconn.c
  lib/stream.c
  lib/stream-ssl.c
  lib/vconn.c
  lib/vconn-stream.c
  ofproto/in-band.c
  ofproto/ofproto.c
  ofproto/pinsched.c
  tests/test-controller.c
  tests/test-flows.c
  tests/test-vconn.c
  utilities/ovs-ofctl.c
  vswitchd/ovs-vswitchd.c

- More on files

- The file ofproto/ofproto.c has defs for OpenFlow such as
  OFOPERATION_ADD, etc. Seems this is a good starting point for extending
  the ovs part of ofp.

- Also, grep for "ofproto_mutex", because it's a global lock (mutex) that
  protects all flow table operations! :)

- ... which leads to this very nice list:

  $ grep -RI ofproto_mutex | cut -f1 -d: | sort | uniq
  lib/classifier.h
  ofproto/connmgr.c
  ofproto/connmgr.h
  ofproto/fail-open.c
  ofproto/ofproto.c
  ofproto/ofproto-dpif.c
  ofproto/ofproto-provider.h

- indeed, most of OpenFlow is implemented in ofproto/ofproto.c
- they use C90 (aka C89), so be sure to follow that
- if you make new .c files, you MUST incude <config.h> per build rules,
  and to automatically build, add them to automake.mk

- a lot of good stuff in connmgr.c as well (executing flows, etc.)

- to run a flow, you pass the struct and a function pointer, so I need to
  dig those out.

- don't know what "dpif" is, but dpid is "datapath id", or the connection
  to a controller.

- anyway, ofproto-dpif.c is THE place to be.. this is where openflow stuff
  actually happens (e.g. hard timeouts are acted on, etc), it seeems

- ah, in lib/dpif.h: "dpif, the DataPath InterFace"

- note: (from dpif.h)
  "In Open vSwitch terminology, a "datapath" is a flow-based software
  switch. A datapath has no intelligence of its own."
  note that they say _switch_ here, and not controller.

- wow, lots of REALLY good documentation in dpif.h! explains basically the
  entire ovs ofp implementation. upcalls happen when a packet doesnt match a
  flow, so it sends to controller.


- ok, so I can now print out logs when flows are executed.. but it appears
they are only printed the first time or so... it seems that when flows have
been installed, it bypasses the normal ofp execution path.. so perhaps they
use some stuff in ovs, a cache or table or whatever, that just knows that it
has to forward a packet or something.. means we have to dig deeper to find
out where we can inject bytecode..

- also, i'm logging stuff to file, and this causes enough of a delay so that
some ping packets are dropped! so, the code has to be blazing fast, which
does not seem to be good for interpreted bytecode.. the best would be to be
able to JIT the code AND have a reentrant interpreter so we can execute a
few cycles, move on, then execute some more, etc.. because if not, we will
hang different message pumps / loops, etc... there are schedulers and stuff,
so if a bytecode takes too much time, it will affect other parts of the
network!

